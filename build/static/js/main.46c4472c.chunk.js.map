{"version":3,"sources":["js/CountDown.jsx","js/PartyMap.jsx","js/PricesCard.jsx","js/FlashBack.jsx","App.js","serviceWorker.js","index.js"],"names":["CountDown","props","state","remainingTime","days","hours","minutes","seconds","calculateRemainingTime","bind","timeout","this","clearTimeout","partyDate","moment","currentDate","diffTime","toString","padStart","Math","floor","asDays","setState","setTimeout","number","label","className","href","target","rel","alt","width","src","renderItem","style","position","right","fontSize","bottom","React","Component","height","PartyMap","Grid","container","spacing","alignItems","item","xs","md","google","zoom","initialCenter","lat","lng","title","name","GoogleApiWrapper","apiKey","language","makeStyles","theme","cardHeader","backgroundColor","color","border","cardPricing","display","justifyContent","marginBottom","FlaskBack","id","App","FlashBack","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.46c4472c.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"../css/CountDown.scss\";\r\nimport * as moment from \"moment\";\r\n\r\nexport default class CountDown extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      remainingTime: {\r\n        days: 0,\r\n        hours: 0,\r\n        minutes: 0,\r\n        seconds: 0\r\n      }\r\n    };\r\n    this.calculateRemainingTime = this.calculateRemainingTime.bind(this);\r\n    this.timeout = null;\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.calculateRemainingTime();\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    clearTimeout(this.timeout);\r\n  }\r\n\r\n  calculateRemainingTime() {\r\n    let remainingTime = {};\r\n    const partyDate = moment(\"2019-11-30T17:00:00-03:00\");\r\n    const currentDate = moment();\r\n    const diffTime = moment.duration(partyDate - currentDate, \"milliseconds\");\r\n\r\n    remainingTime.seconds = diffTime\r\n      .seconds()\r\n      .toString()\r\n      .padStart(2, \"0\");\r\n    remainingTime.minutes = diffTime\r\n      .minutes()\r\n      .toString()\r\n      .padStart(2, \"0\");\r\n    remainingTime.hours = diffTime\r\n      .hours()\r\n      .toString()\r\n      .padStart(2, \"0\");\r\n    remainingTime.days = Math.floor(diffTime.asDays())\r\n      .toString()\r\n      .padStart(2, \"0\");\r\n\r\n    this.setState({ ...this.state, remainingTime });\r\n\r\n    this.timeout = setTimeout(() => this.calculateRemainingTime(), 1000);\r\n  }\r\n\r\n  renderItem(number, label) {\r\n    return (\r\n      <div className=\"countdown-item\">\r\n        <span className=\"countdown-item-number\">{number}</span>\r\n        <span className=\"countdown-item-label\">{label}</span>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"countdown-container\">\r\n        <div className=\"countdown-header\">\r\n          <a\r\n            href=\"https://twitter.com/intent/tweet?hashtags=FLASHBACKCEFET\"\r\n            target=\"_blank\"\r\n            rel=\"noopener noreferrer\"\r\n          >\r\n            Tweet com #FLASHBACKCEFET\r\n          </a>\r\n          <a\r\n            href=\"https://open.spotify.com/playlist/6hNp3o2BPT7coXmf7tdN0W?si=R0mLtMn-S5aLnBzBOF3YMA\"\r\n            target=\"_blank\"\r\n            rel=\"noopener noreferrer\"\r\n          >\r\n            <img\r\n              alt=\"Spotify Playlist\"\r\n              width=\"20\"\r\n              src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/1/19/Spotify_logo_without_text.svg/1024px-Spotify_logo_without_text.svg.png\"\r\n            />\r\n          </a>\r\n        </div>\r\n        <div className=\"countdown-logo\">\r\n          <img src=\"/flshbck-logo.png\" alt=\"Flashback CEFET logo\" />\r\n        </div>\r\n        <div className=\"countdown-content\">\r\n          {this.renderItem(this.state.remainingTime.days, \"Dias\")}\r\n          {this.renderItem(this.state.remainingTime.hours, \"Horas\")}\r\n          {this.renderItem(this.state.remainingTime.minutes, \"Minutos\")}\r\n          {this.renderItem(this.state.remainingTime.seconds, \"Segundos\")}\r\n        </div>\r\n        <a href=\"#prices-page\" className=\"countdown-footer\">\r\n          <img src=\"/arrow.png\" alt=\"Flashback CEFET arrow-down\" />\r\n          <span>mais informações em breve</span>\r\n          <span\r\n            style={{ position: \"absolute\", right: 4, fontSize: 10, bottom: 4 }}\r\n          >\r\n            by Cardume\r\n          </span>\r\n        </a>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport '../css/PartyMap.css';\r\nimport { Map, GoogleApiWrapper, Marker } from 'google-maps-react';\r\n\r\nconst style = {\r\n    width: '50%',\r\n    height: '50%'\r\n}\r\n\r\nexport class PartyMap extends React.Component {\r\n    \r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n        }\r\n    } \r\n\r\n    render() {\r\n        return (\r\n            <Grid container spacing={2} alignItems=\"center\">\r\n                <Grid item xs={8} md={3}>\r\n                    <Map google={this.props.google}\r\n                        zoom={18}\r\n                        style={style}\r\n                        initialCenter={{ lat: -19.834889, lng: -44.014472}}\r\n                        >\r\n                        <Marker\r\n                            title={'The marker`s title will appear as a tooltip.'}\r\n                            name={'Resenha'}\r\n                            position={{lat: -19.834889, lng: -44.014472}} />\r\n                    </Map>\r\n                </Grid>\r\n            </Grid>\r\n        );\r\n      }\r\n}\r\n\r\nexport default GoogleApiWrapper({\r\n    apiKey: 'AIzaSyDJe3WBxKcL4CVM5aZaEdkNOb3zdS2IHv4',\r\n    language: 'pt-br'\r\n})(PartyMap);","import React from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport CardActions from \"@material-ui/core/CardActions\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Container from \"@material-ui/core/Container\";\r\nimport CardHeader from \"@material-ui/core/CardHeader\";\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  cardHeader: {\r\n    backgroundColor: \"#000\",\r\n    color: \"#fff\",\r\n    border: \"solid 1px #fff\"\r\n  },\r\n  cardPricing: {\r\n    display: \"flex\",\r\n    justifyContent: \"center\",\r\n    alignItems: \"baseline\",\r\n    marginBottom: theme.spacing(2)\r\n  }\r\n}));\r\n\r\nconst tiers = [\r\n  {\r\n    title: \"1° Lote\",\r\n    price: \"35\"\r\n  },\r\n  {\r\n    title: \"2° Lote\",\r\n    price: \"40\"\r\n  },\r\n  {\r\n    title: \"3° Lote\",\r\n    price: \"45\"\r\n  },\r\n  {\r\n    title: \"4° Lote\",\r\n    price: \"50\"\r\n  }\r\n];\r\n\r\nexport default function SimpleCard() {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <Container component=\"main\">\r\n      <h3>Preços</h3>\r\n      <Grid container spacing={5} alignItems=\"flex-end\">\r\n        {tiers.map(tier => (\r\n          <Grid item key={tier.title} xs={12} sm={12} md={3}>\r\n            <Card>\r\n              <CardHeader\r\n                title={tier.title}\r\n                subheader={tier.subheader}\r\n                titleTypographyProps={{ align: \"center\" }}\r\n                subheaderTypographyProps={{ align: \"center\" }}\r\n                className={classes.cardHeader}\r\n              />\r\n              <CardContent className=\"cards-price\">\r\n                <div className={classes.cardPricing}>\r\n                  <Typography component=\"h2\" variant=\"h3\" color=\"textPrimary\">\r\n                    R${tier.price}\r\n                  </Typography>\r\n                </div>\r\n              </CardContent>\r\n            </Card>\r\n          </Grid>\r\n        ))}\r\n        <CardActions>\r\n          <Button className=\"btn-sale\" size=\"small\">\r\n            <a\r\n              href=\"https://www.sympla.com.br/flashback-cefet__697366\"\r\n              target=\"_blank\"\r\n            >\r\n              Comprar\r\n            </a>\r\n          </Button>\r\n        </CardActions>\r\n      </Grid>\r\n    </Container>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport \"../css/FlashBack.css\";\r\nimport CountDown from \"./CountDown\";\r\nimport PartyMap from \"./PartyMap\";\r\nimport PricesCard from \"./PricesCard\";\r\nimport { AccessTime, AttachMoney, Room } from \"@material-ui/icons\";\r\n\r\nexport default function FlaskBack(props) {\r\n  return (\r\n    <>\r\n      {/* <div className=\"side-menu\">\r\n        <a href=\"#countdown-page\">\r\n          <AccessTime fontSize=\"small\" />\r\n        </a>\r\n        <a href=\"#prices-page\">\r\n          <AttachMoney fontSize=\"small  \" />\r\n        </a>\r\n        <a href=\"#map-page\">\r\n          <Room fontSize=\"small\" />\r\n        </a>\r\n      </div> */}\r\n      <div className=\"countdown-page\" id=\"countdown-page\">\r\n        <CountDown />\r\n      </div>\r\n      {/* <section className=\"page-2\" id=\"prices-page\">\r\n        <PricesCard />\r\n      </section>\r\n      <section className=\"page-3\" id=\"map-page\">\r\n        <PartyMap />\r\n      </section> */}\r\n    </>\r\n  );\r\n}\r\n","import FlashBack from './js/FlashBack'\r\n\r\nfunction App() {\r\n  return new FlashBack();\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}